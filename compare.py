import nltk
from nltk.parse.generate import generate
from nltk import CFG
from nltk import Nonterminal

# Define a function to generate sentences from a grammar
def generate_sentences(grammar, start_symbol, max_len):
    cfg = CFG.fromstring(grammar)
    sentences = set()
    for sentence in generate(cfg, n=None, start=Nonterminal(start_symbol), depth=max_len):
        sentence_str = ' '.join(sentence)
        if len(sentence_str.replace(' ', '')) <= max_len:  # Check length without spaces
            sentences.add(sentence_str)
    return sentences

# Define the grammars
grammar1 = """
S -> ASB
A -> 'a' | 'a' AS | ''
B -> A | S 'b' S | 'b' 'b'
"""

grammar2 = """
S -> AS | EB | SB
A -> DS | GS | 'a'
B -> DS | FS | GS | HH | 'a'
D -> GA
E -> AS
F -> SH
G -> 'a'
H -> 'b'
"""

# Generate sentences from both grammars up to a certain length
max_len = 6  # Adjust this length as needed
start_symbol = 'S'

sentences1 = generate_sentences(grammar1, start_symbol, max_len)
sentences2 = generate_sentences(grammar2, start_symbol, max_len)

# Compare the sets of sentences
if sentences1 == sentences2:
    print("Both grammars generate the same language (within the tested length).")
else:
    print("The grammars generate different languages (within the tested length).")

print(f"Sentences generated by Grammar 1:\n{sentences1}")
print(f"Sentences generated by Grammar 2:\n{sentences2}")
